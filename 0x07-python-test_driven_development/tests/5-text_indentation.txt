# 5-text_indentation.py

=================================
How to use 5-text_indentation.py
=================================

This module defines a text-indentation function ``text_indentation(string)``.

Usage
=====

The ouput of this function in the text string input with two new lines added
after each following characters ``.``, ``?``, and ``:``.

::

	>>> text_indentation = __import__('5-text_indentation').text_indentation
	>>> text_indentation("Wanna pizza? No thanks.")
	Wanna pizza?
	<BLANKLINE>
	No thanks.
	<BLANKLINE>

No spaces are printed at the beginning of a line.

::

	>>> text_indentation("   There is a space at the beginning")
	There is a space at the beginning

If only spaces nothing is printed

::

	>>> text_indentation("      ")

Similarly, no spaces are printed at the end of each printed line.

::

	>>> text_indentation("Space at the end.  ")
	Space at the end.
	<BLANKLINE>

::

	>>> text_indentation("  Spaces both end and beginning.  ")
	Spaces both end and beginning.
	<BLANKLINE>

New lones within a string are printed as normal.

::

    >>> text_indentation("Let's print a new-line! Here goes:\nPrinted.")
    Let's print a new-line! Here goes:
    <BLANKLINE>
    <BLANKLINE>
    Printed.
    <BLANKLINE>

::

    >>> text_indentation("\n\n\n We just printed three new lines.")
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>
    We just printed three new lines.
    <BLANKLINE>

Invalid Text
============

The parameter ``text`` must be a string. Otherwise, a TypeError is raised.

::

    >>> text_indentation(7)
    Traceback (most recent call last):
    TypeError: text must be a string

::

    >>> text_indentation({"one": 1, "two": 2})
    Traceback (most recent call last):
    TypeError: text must be a string

::

    >>> text_indentation(None)
    Traceback (most recent call last):
    TypeError: text must be a string
